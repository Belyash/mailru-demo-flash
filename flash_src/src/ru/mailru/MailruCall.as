package ru.mailru {	import flash.events.Event;import flash.events.EventDispatcher;import flash.external.ExternalInterface;import flash.utils.getQualifiedClassName;[Event(name="complete", type="flash.events.Event")]public class MailruCall	{		static private var callbacks     : Object = {};	static private var flashId       : String;	static private var appsecretKey : String;	static private var dispatcher    : EventDispatcher = new  EventDispatcher();	static private var isInited      : Boolean = false;		static public function init ( DOMFlashId : String, secretKey : String = "", appID: String = "", appType : String = 'app') : void {		if ( isInited ) { throw Error ( 'MailruCall already initialized' ); return; }		flashId = DOMFlashId;		appsecretKey = secretKey;		var apiCallString : String = 'mailru.';		apiCallString += (appType.toLowerCase() == "connect" ? "connect" : "app") + '.init("';		apiCallString += (appType.toLowerCase() == "connect" ? appID + '", "' + secretKey : secretKey + '", "' + appID);		apiCallString += '")';		ExternalInterface.addCallback('mailruReceive', receiver);		ExternalInterface.addCallback('apiLoadedHandler', onApiLoaded);		ExternalInterface.call('(function (private_key, ' + DOMFlashId + '){ ' +					'mailru.loader.require("api", function () {' +						'try{' +							apiCallString +						'} catch (e) {' +							'(new Image()).src="http://goshka.mail.ru/gstat?api.param1=1&rnd="+ Math.random();' +						'}' +						'var e;' +						'if (' + DOMFlashId + ' && (e=document.getElementById("' + DOMFlashId + '"))) {' +							'e.apiLoadedHandler();' + 							'mailru.events.listen("event", function(name, data) {' + 								'e.mailruEvent(name, data);' +							'});' + 						'}' + 					'})' +				'})', secretKey, flashId );		isInited = true;		trace ("apiCallString: " + apiCallString);	}			/** Если callback не указан, exec() попытается вернуть значение **/		static public function exec ( method : String, callback : Function = null, ...args ) : * {		var cbid : int;		if ( callback != null ) {			cbid = Math.round ( Math.random() * int.MAX_VALUE );			callbacks[cbid] = callback;		}		var objectName:String = (method.match(/(.*)\.[^.]+$/)||[0,'window'])[1];		trace ("objectName: " + objectName);		return ExternalInterface.call(												'(function(args, cbid){ ' +  			'if(typeof ' + method + ' != "function"){ ' +			'	if(cbid) { document.getElementById("'+ flashId+ '").mailruReceive(cbid, ' + method + '); }' +			'	else { return '+ method+ '; }' +			'}' +  						'if(cbid) {' + 			'	args.unshift(function(value){ ' + 			'		document.getElementById("'+ flashId+ '").mailruReceive(cbid, value) ' +			'	}); ' + 			'};' + 			'return '+ method+ '.apply('+ objectName+ ', args) ' + 			'})',		args, cbid);	}		static public function receiver ( cbid : Number, data : Object ) : void {		if ( callbacks[cbid] ) {			var cb : Function = callbacks[cbid];			delete callbacks[cbid];			cb.call ( null, data );		}	}			static public function connectLogin () : void {		ExternalInterface.call('mailru.connect.login');	}		static public function eventReceiver ( name : String, data : Object ) : void {		dispatchEvent ( new MailruCallEvent ( name, data ) );	}			static public function onApiLoaded ( ...args ) : void {		trace ("onApiLoaded");		ExternalInterface.addCallback ( 'mailruEvent', eventReceiver );		dispatchEvent ( new Event ( Event.COMPLETE ) );	}		/************************* EventDispatcher IMPLEMENTATION ****************************/		static public function addEventListener ( type : String, listener : Function, priority : int = 0, useWeakReference : Boolean = false ) : void {   		dispatcher.addEventListener ( type, listener, false, priority, useWeakReference );	}		static public function removeEventListener ( type : String, listener : Function ) : void {		dispatcher.removeEventListener ( type, listener );	}		static public function hasEventListener ( type : String ) : Boolean {		return dispatcher.hasEventListener ( type );	}		static public function dispatchEvent ( event : Event ) : void {		dispatcher.dispatchEvent ( event );	}	}}