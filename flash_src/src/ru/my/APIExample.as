package ru.my {	import flash.text.TextField;	import flash.events.MouseEvent;	import flash.external.ExternalInterface;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.system.Security;	import ru.my.config.Config;	import ru.my.config.ConfigLoader;	import flash.display.Sprite;	import flash.events.Event;	import ru.mailru.MailruCall;	import ru.mailru.MailruCallEvent;		// for traceObject	import flash.utils.getQualifiedClassName;	/**	 * @author alexanderdolgov	 */	[SWF(backgroundColor="#FFFFFF", frameRate="60", width="720", height="320")]	public class APIExample extends Sprite {		private const MENU_OFFSET : int = 10;		private static const CUSTOM_JS_EVENT : String = 'customJSEvent';		private var ldr : ConfigLoader;		private var menuContainer : Sprite;		private var demoTextField : TextField;		private var callMethod : TextField;				public function APIExample() {			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;			Security.allowDomain ( '*' );			log ( 'App Started!' );			// Теперь можно добавлять слушателей			// COMPLETE диспатчится, когда JS API полностью загрузился и готов к работе			MailruCall.addEventListener ( Event.COMPLETE, mailruReadyHandler );				// Прежде всего необходимо инициализировать MailruCall			MailruCall.init ( "main", "f9f416f503caad7a0c323c1298cf370e");				// Подписываемся на событие, которое может послать нам HTML-часть нашего приложения			addEventListener(Event.ADDED_TO_STAGE, onAdded);						// Подписываемся на событие, которое может послать нам HTML-часть нашего приложения			MailruCall.addEventListener ( CUSTOM_JS_EVENT, log );						// Подписываемся события API			MailruCall.addEventListener ( MailruCallEvent.PERMISSIONS_CHANGED, eventLog );			MailruCall.addEventListener ( MailruCallEvent.ALBUM_CREATED, eventLog );			MailruCall.addEventListener ( MailruCallEvent.GUESTBOOK_PUBLISH, eventLog );			MailruCall.addEventListener ( MailruCallEvent.STREAM_PUBLISH, eventLog );			MailruCall.addEventListener ( 'app.readHash', eventLog );			MailruCall.addEventListener('app.paymentDialogStatus',eventLog);			MailruCall.addEventListener('app.friendsInvitation', eventLog);			MailruCall.addEventListener('common.upload', eventLog);								}				/** Прогрузился API, можно делать вызовы **/   		private function mailruReadyHandler ( event : Event ) : void {			log ( 'Mail.ru API ready' );		}		/*		 * Handling stage initialization 		 */		private function onAdded(event : Event) : void {			removeEventListener(Event.ADDED_TO_STAGE, onAdded);			ldr = new ConfigLoader();			ldr.loadData("api2.json?" + Math.round(Math.random() * 100));			ldr.addEventListener(Event.COMPLETE, onConfigLoaded);		}		/*		 * Handling config loading		 */		private function onConfigLoaded(event : Event) : void {			ldr.removeEventListener(Event.COMPLETE, onConfigLoaded);			ldr = null;			createMenuByLoadedConfig();			// demo text field			addChild(callMethod = new TextField());			callMethod.x = stage.stageWidth - callMethod.width - 10;			callMethod.text = "Run DEMO!";			callMethod.y = 10;			callMethod.background = true;			callMethod.height = 30;			callMethod.width = 120;			callMethod.backgroundColor = 0x00cc00;			addChild(demoTextField = new TextField());			demoTextField.x = 10;			demoTextField.y = stage.stageHeight - 20;			demoTextField.width = stage.stageWidth;		}		/*		 * Create menu objects by configs settings 		 */		private function createMenuByLoadedConfig() : void {						// creating menu			var sts : Config = Config.getInstance();			addChild(menuContainer = new Sprite());			menuContainer.addEventListener(MouseEvent.CLICK, onMenuClicked);			menuContainer.x = MENU_OFFSET;			for (var itemName : String in sts.data) {				createItem(itemName, sts.data[itemName]);			}		}		private function onMenuClicked(event : MouseEvent) : void {			if (event.target is MenuItem) {				var it : MenuItem = event.target as MenuItem;				var callback:Function;				it.openMenu();								if (it.data) {										if (it.data["event"]) {						MailruCall.addEventListener(it.data["event"], eventLog);					}										log ('CALL: ' + it.data['method'] + '() ' + ' >>> ' + traceObject(it.data['params']));					if (it.data['callback']) {						callback  = this[it.data['callback']];						MailruCall.exec (it.data['method'], callback, it.data['params']);					} else {						MailruCall.exec (it.data['method'], objectLog, it.data['params']);					}										demoTextField.text = it.data['description'];									}			}		}		/*		 * Create new menu item by config item		 */		private function createItem(itemName : String, data : Object) : void {			var item : MenuItem;			if(data) {				//trace(data.post.event);				//trace(itemName, traceObject(data));			}						menuContainer.addChild(item = new MenuItem(itemName, data, true));			trace(menuContainer.height);			if (menuContainer.height > 30) {				item.y = menuContainer.height + 3;			} else {				item.y = 10;			}					}				public function eventsLikeCallback (params) : void {			trace ('eventsLikeCallback(): ' + params);			ExternalInterface.call ( 'flashLog', 'eventsLikeCallback(): ' + params);		}		public function mailruCommonStreamPostCallback (params) : void {			trace ('mailruCommonStreamPostCallback(): ' + params);			ExternalInterface.call ( 'flashLog', 'mailruCommonStreamPostCallback(): ' + params);		}		public function mailruSessionVidCallback (params) : void {			log ('My ID is ' + params);		}				/** Кастомная функция для отладки **/		public function log ( ...args ) : void {			trace ( args.join ( ', ' ) );			ExternalInterface.call ( 'flashLog', args.join ( ', ' ) );		}				/** Кастомная функция для отладки событий **/		public function eventLog (  event : MailruCallEvent ) : void {			log ( 'FIRED EVENT: ' + event.type + ': ' + traceObject ( event.data ) );		}				 		public function objectLog ( object : Object  ) : void {			log ( 'CALBACK: ' + traceObject ( object ) );		}				public function keys ($hash:Object):Array {			var $res:Array = [];			for (var $key:String in $hash) $res.push($key);			return $res;		}		public function traceObject ( obj : *, shift : String = '-> ' ) : String {			var str : String = '';			var substr : String						var QCN : String;			for ( var ind : String in obj ) {				str += '\n' + shift + ind + ' : ';				QCN = getQualifiedClassName ( obj[ind] );				if ( QCN == 'String' || obj[ind] is Boolean || obj[ind] is Number ) { str += '' + obj[ind]; }				else if ( keys ( obj[ind] ).length == 0 ) {					if ( QCN == 'Object' ) { str += '[Empty Object]'; }					else if ( QCN == 'Array' ) { str += '[Empty Array]'; }				} 				else {					if ( QCN == 'Object' ) { str += '[Object]'; }					else if ( QCN == 'Array' ) { str += '[Array]'; }					substr = traceObject ( obj[ind], '-' + shift ); 					str += substr;				}			}						if ( str == '' ) { str = obj + ''; }						return str;		}	}}import flash.display.DisplayObjectContainer;// ======================== H E L P E R    M E N U   I T E M   C L A S S ========================== //import flash.display.Sprite;import flash.text.TextField;import flash.text.TextFormat;class MenuItem extends Sprite {	// constants	public static const ITEM_HEIGHT : int = 20;	// public	public var data : Object;	// private	private var nameField : TextField;	private var itemsContainer : Sprite;	private var fmt : TextFormat;	public function MenuItem(itemName : String, itemData : Object = null, bold : Boolean = false) : void {		fmt = new TextFormat("Arial", 16, null, null, null, null, null, null, null, 3, 3);		clear(this);		if (itemsContainer) {			clear(itemsContainer);			itemsContainer = null;		}		nameField = new TextField();		nameField.background = true;		nameField.backgroundColor = 0x6A9ED6;		nameField.borderColor = 0x4386cc;		nameField.mouseEnabled = false;		nameField.width = 1;		nameField.autoSize = 'left';		nameField.selectable = false;		nameField.defaultTextFormat = fmt;		nameField.textColor = 0xFFFFFF;		nameField.height = ITEM_HEIGHT;		nameField.border = true;		nameField.text = itemName;		this.addChild(nameField);		// parse data to subitems		if (itemData) {			createSubitems(itemData);		}	}	private function createSubitems(itemData : Object) : void {		addChild(itemsContainer = new Sprite());		itemsContainer.visible = false;		itemsContainer.x = nameField.width + 3;		for (var subItemName : String in itemData) {			var menuSubitem : MenuItem = new MenuItem(subItemName);			menuSubitem.data = itemData[subItemName];			menuSubitem.x = itemsContainer.width;			itemsContainer.addChild(menuSubitem);		}	}	public function closeMenu() : void {		if (itemsContainer) itemsContainer.visible = false;	}	public function openMenu() : void {		if (itemsContainer && !itemsContainer.visible) {			var pt : DisplayObjectContainer = itemsContainer.parent.parent;			if (pt) {				for (var i : int = 0; i < pt.numChildren; i++) {					if (pt.getChildAt(i) is MenuItem)						(pt.getChildAt(i) as MenuItem).closeMenu();				}			}			itemsContainer.visible = true;		} else if (itemsContainer && itemsContainer.visible) closeMenu();	}	public function get itemName() : String {		return nameField.text.toLowerCase();	}	private function clear(cont : DisplayObjectContainer) : void {		while (cont.numChildren > 0) {			cont.removeChildAt(0);		}	}	}